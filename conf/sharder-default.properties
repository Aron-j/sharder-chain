# Copyright Â© 2017-2018 Sharder Foundation.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you can visit it at:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
#
# This software uses third party libraries and open-source programs,
# distributed under licenses described in 3RD-PARTY-LICENSES.


# Do not modify this file. Instead, create a sharder.properties file with only the
# properties you need to change, and set them there. The values in 
# sharder.properties override those in sharder-default.properties.



#### SYSTEM ####

# Set the socks proxy host.
#socksProxyHost=localhost

# Set the socks proxy port.
#socksProxyPort=9050



#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
sharder.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
sharder.peerServerPort=3218

# Enable UPnP for the peer port.
sharder.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
#sharder.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
#sharder.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
sharder.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from sharder.peerServerPort (useful if you do port
# forwarding behind a router).
sharder.myAddress=

# My platform, to be announced to peers.
sharder.myPlatform=

# My hallmark, if available.
sharder.myHallmark=

# Default initial peers. Only used if sharder.usePeersDb=true.
# Do not modify. Add custom peers to sharder.wellKnownPeers instead.
sharder.defaultPeers=
  
# A list of well known peer addresses / host names, separated by '; '. These
# peers are always kept in connected state.
sharder.wellKnownPeers=

# Known bad peers to be blacklisted.
sharder.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if sharder.usePeersDb=true.
# Do not modify. Add custom testnet peers to sharder.testnetPeers instead.
sharder.defaultTestnetPeers=49.4.9.166; 120.79.243.35; 121.40.110.145

# Well known testnet peers.
sharder.testnetPeers=

# Maximum number of inbound connections.
sharder.maxNumberOfInboundConnections=250

# Maximum number of outbound connections.
sharder.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
sharder.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
sharder.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
sharder.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
sharder.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
sharder.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
sharder.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer.
sharder.useWebSockets=true

# WebSocket connection idle timeout (milliseconds).
sharder.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
sharder.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
sharder.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
sharder.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
sharder.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
sharder.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
sharder.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
sharder.enablePeerServerGZIPFilter=true


# Network definitions is follows:
# Mainnet: peer port is 4218, ui port is , api port is
# Testnet: peer port is 4218, ui port is , api port is
# Devnet: peer port is 4218, ui port is , api port is
sharder.network=Testnet

# Save known peers in the database
sharder.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
sharder.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
sharder.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# sharder.shareMyAddress=false, sharder.wellKnownPeers=, sharder.testnetPeers= 
# and sharder.usePeersDb=false, and if set to true overrides those properties.
sharder.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
sharder.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
sharder.cjdnsOnly=false

# Do not include exception details when returning error response to peers.
sharder.hideErrorDetails=false

# Server provides nodes which are contained in the network
sharder.authenticationServer=http://120.79.243.35:8088/v1/peers/

#### API SERVER ####

# Accept http/json API requests.
sharder.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
# sharder.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1]; 192.168.31.145;
sharder.allowedBotHosts=*

# Port for http/json API requests.
sharder.apiServerPort=3215

# Port for https/json API request. If same as sharder.apiServerPort, the sharder.apiSSL
# setting determines whether SSL is used or not.
sharder.apiServerSSLPort=3215

# Enable UPnP for the API ports.
sharder.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.

#sharder.apiServerHost=127.0.0.1
sharder.apiServerHost=0.0.0.0

# Idle timeout for http/json API request connections, milliseconds.
sharder.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
sharder.apiResourceBase=./html/www

# Default page for the API server.
sharder.apiWelcomeFile=index.html

# Java API documentation directory, optional.
sharder.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
sharder.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
sharder.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set sharder.keyStorePath and
# sharder.keyStorePassword).
# Non-SSL connections will be disabled if sharder.apiServerSSLPort is equal to
# sharder.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
sharder.apiSSL=false

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#sharder.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
sharder.apiServerEnforcePOST=true

# Compress Http responses for the API server.
sharder.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# sharder.apiServerHost=127.0.0.1.
sharder.adminPassword=ss2018

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
sharder.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
sharder.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
sharder.apiEventTimeout=300

# Maximum number of applications with active event registrations.
sharder.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#sharder.maxUploadFileSize=0

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeNQT=0 has
# been specified. Default is false.
sharder.correctInvalidFees=false

# APIs to disable, as a semicolon separated list.
sharder.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
sharder.disabledAPITags=

# Set to true to enable the business apis for business API requests
# when API server is publicly accessible.
sharder.enableBizAPIs=true

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
sharder.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see sharder.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
sharder.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
sharder.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
sharder.apiProxyBlacklistingPeriod=1800000



#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
sharder.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to
# allow all.
sharder.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
sharder.uiServerPort=3215

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
sharder.uiServerHost=127.0.0.1

# Idle timeout for NRS user interface server, milliseconds.
sharder.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
sharder.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
sharder.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set sharder.keyStorePath and
# sharder.keyStorePassword).
sharder.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
sharder.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
sharder.log=sharder.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#sharder.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
sharder.enableLogTraceback=false

# Enable logging of exception stack traces.
sharder.enableStackTraces=true

# Enable logging of Jetty messages.
#sharder.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
sharder.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
sharder.debugTraceAccounts=

# File name for logging tracked account balances.
sharder.debugTraceLog=sharder-trace.csv

# Separator character for trace log.
sharder.debugTraceSeparator=\t

# Quote character for trace log.
sharder.debugTraceQuote="

# Log changes to unconfirmed balances.
sharder.debugLogUnconfirmed=false

# Log account balance calculations for FXT snapshot for the following account.
#sharder.logFxtBalance=



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The sharder_db folder is expected to be in the current working directory, will be
# created if missing.
# sharder.dbUrl=jdbc:h2:./sharder_db/sharder;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# sharder.testDbUrl=jdbc:h2:./sharder_test_db/sharder;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

sharder.dbType=h2
sharder.testDbType=h2

sharder.dbDir=./sharder_db/sharder
sharder.testDbDir=./sharder_test_db/sharder

sharder.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
sharder.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

sharder.dbUsername=sa
sharder.testDbUsername=sa

sharder.dbPassword=sa
sharder.testDbPassword=sa

# Database connection timeout in seconds.
sharder.dbLoginTimeout=70

# Database default lock timeout in seconds.
sharder.dbDefaultLockTimeout=60

# Database max memory rows limit.
sharder.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
sharder.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
sharder.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
sharder.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
sharder.maxRollback=800

# When trimming is enabled, it is run every sharder.trimFrequency blocks.
sharder.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
sharder.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, sharder.maxPrunableLifetime must
# be -1 and sharder.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
sharder.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
sharder.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
sharder.transactionLogThreshold=15000

# Log the average transaction time after this many minutes.
sharder.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
sharder.enablePublicKeyCache=true



#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
sharder.forgingDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
sharder.forgingSpeedup=3

# Maximum number of forging accounts allowed on this node.
sharder.maxNumberOfForgers=100

# Verify batches of blocks downloaded from a single peer with that many other
# peers. default value is 2
sharder.numberOfForkConfirmations=2
sharder.testnetNumberOfForkConfirmations=2

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
sharder.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
sharder.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
sharder.maxNumberOfMonitors=100

#The time of Sharder generate block
sharder.blockGap=8
sharder.testnetBlockGap=1



#### DESKTOP WALLET ####

# When using desktop mode and when user interface is available. Launch the
# wallet inside a desktop frame when the node is started.
sharder.launchDesktopApplication=true

# The default account is used, to automatically login to the wallet during
# startup.
sharder.defaultDesktopAccount=


#### ACCOUNT LEDGER ####

# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
sharder.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
sharder.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
sharder.ledgerTrimKeep=30000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
sharder.processPolls=true



#### MINT ####

# Address of the Sharder server to which the mint worker submits its transactions
# (default: localhost).
sharder.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
sharder.mint.useHttps=false

# Specify a mintable currency code.
sharder.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by sharder.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
sharder.mint.secretPhrase=

# Number of units to mint per transaction.
# The minting difficulty grows linearly with the number of units per mint.
sharder.mint.unitsPerMint=1

# The initial nonce used for minting.
# Set to 0 to start with a random nonce.
sharder.mint.initialNonce=0

# Number of concurrency threads used for minting.
# Set to 0 allocate one thread per processor core.
sharder.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
sharder.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response.
sharder.mint.stopOnError=false



#### Shuffling ####

# Delete finished shufflings and their participants. When enabled, records of
# completed shufflings and their participants are deleted after the shuffling
# has finished, which will improve performance by keeping their tables smaller.
sharder.deleteFinishedShufflings=false

# Use strong secure random implementation. As this can block on unix systems,
# it is disabled by default. Enable only if using haveged or other entropy
# source that makes reading from /dev/random fast, otherwise server-side
# encryption will be unusably slow and cause coin shufflings to fail.
sharder.useStrongSecureRandom=false

# Maximum number of shufflers allowed to run at the same time on this node.
sharder.maxNumberOfShufflers=100



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
sharder.peerServerDoSFilter.maxRequestsPerSec=30
sharder.peerServerDoSFilter.delayMs=1000
sharder.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
sharder.keyStorePath=keystore
sharder.keyStorePassword=password

# keystore type defaults to JKS can be changed to PKCS12.
sharder.keyStoreType=JKS

#### Developers only ####

# Force re-validation of blocks and transaction at start.
sharder.forceValidate=false

# Force re-build of derived objects tables at start.
sharder.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# sharder.timeMultiplier=1

# Enable the following AddOns, which must also be on the classpath, e.g. placed
# in the addons/classes or addons/lib directory. List of class names, separated
# by semicolon.
#sharder.addOns=sharder.addons.Demo; sharder.addons.AfterStart; sharder.addons.BeforeShutdown

# Demo after start and before shutdown scripts
#sharder.afterStartScript=../bin/afterStart.sh
#sharder.beforeShutdownScript=../bin/beforeShutdown.sh

# NRS normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
sharder.disableSecurityPolicy=false

#### Transaction fee ####
# Set the fee of transaction
sharder.fee.payment=100000000
sharder.fee.message=
sharder.fee.digitalGoods=
sharder.fee.accountControl=
sharder.fee.monetarySystem=
sharder.fee.dataFee=
sharder.fee.shuffling=
sharder.fee.data0M=
sharder.fee.data1M=
sharder.fee.data2M=
sharder.fee.data3M=
sharder.fee.data4M=400000000
sharder.fee.data5M=
sharder.fee.data6M=
sharder.fee.data7M=
sharder.fee.data8M=700000000
sharder.fee.data9M=
sharder.fee.data10M=

# COS version.
sharder.version=0.0.8
sharder.build=2

# H2 Database backup
# crontab-like formatted, examples like :

#5 * * * *
#This pattern causes a task to be launched once every hour, at the begin of the fifth minute (00:05, 01:05, 02:05 etc.).

#* * * * *
#This pattern causes a task to be launched every minute.

#* 12 * * Mon
#This pattern causes a task to be launched every minute during the 12th hour of Monday.

#* 12 16 * Mon
#This pattern causes a task to be launched every minute during the 12th hour of Monday, 16th, but only if the day is the 16th of the month.
#Every sub-pattern can contain two or more comma separated values.

#59 11 * * 1,2,3,4,5
#This pattern causes a task to be launched at 11:59AM on Monday, Tuesday, Wednesday, Thursday and Friday.
#Values intervals are admitted and defined using the minus character.

#59 11 * * 1-5
#This pattern is equivalent to the previous one.
#The slash character can be used to identify step values within a range. It can be used both in the form */c and a-b/c. The subpattern is matched every c values of the range 0,maxvalue or a-b.

#*/5 * * * *
#This pattern causes a task to be launched every 5 minutes (0:00, 0:05, 0:10, 0:15 and so on).

#3-18/5 * * * *
#This pattern causes a task to be launched every 5 minutes starting from the third minute of the hour, up to the 18th (0:03, 0:08, 0:13, 0:18, 1:03, 1:08 and so on).

#*/15 9-17 * * *
#This pattern causes a task to be launched every 15 minutes between the 9th and 17th hour of the day (9:00, 9:15, 9:30, 9:45 and so on... note that the last execution will be at 17:45).
#All the fresh described syntax rules can be used together.

#* 12 10-16/2 * *
#This pattern causes a task to be launched every minute during the 12th hour of the day, but only if the day is the 10th, the 12th, the 14th or the 16th of the month.

#* 12 1-15,17,20-25 * *
#This pattern causes a task to be launched every minute during the 12th hour of the day, but the day of the month must be between the 1st and the 15th, the 20th and the 25, or at least it must be the 17th.
#Finally cron4j lets you combine more scheduling patterns into one, with the pipe character:

#0 5 * * *|8 10 * * *|22 17 * * *
#This pattern causes a task to be launched every day at 05:00, 10:08 and 17:22.
sharder.db.enableBackup=true
sharder.db.backup.cron=0 4 * * *
sharder.db.backup.path=backup
sharder.db.backup.retainDays=15

# ====================== Storage =========================
# to be a storage node or not
sharder.enableStorage=true
# Ssid prefix i=private ipfs
sharder.storage.provider.default=i
# -------------- IPFS Private Network Setting !!! Don't Modified Anyway------------
# Swarm port
sharder.storage.ipfs.swarm.port=8001
# API port
sharder.storage.ipfs.api.port=9001
# Gateway port
sharder.storage.ipfs.gateway.port=8099
# Where to save storage and config files, Default: storage/ipfs/.ipfs
sharder.storage.ipfs.storepath=
# Enable automatic periodic repo garbage collection. Default: false.
sharder.storage.ipfs.deamon.enable-gc=true
# Default initial bootstrap nodes used for testnet only.
sharder.storage.ipfs.bootstrap.defaultTestnetNodes=/ip4/192.168.31.128/tcp/8001/ipfs/QmPE9Q8HMvJ16aXpQxkaRU1giMLEsMkNDbt6ZES25oQkCW
# Default initial bootstrap nodes
sharder.storage.ipfs.bootstrap.defaultNodes=

# ====================== Storage ===========================
